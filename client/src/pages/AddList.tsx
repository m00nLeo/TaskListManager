import React from "react";
import { Link, useLocation } from "react-router-dom";
import Card from "../components/Card";
import { FaLongArrowAltLeft } from "react-icons/fa";
import "react-toastify/dist/ReactToastify.css";
import { useQuery } from "@tanstack/react-query";
import { fetchList } from "../services/my_api";
import { useAddList } from "../hooks/useAddList";
import { Task, TaskResponse } from "../types/ListItem";
import { SubmitHandler, useForm } from "react-hook-form";

interface FormFields {
  title: string;
  description: string;
  date: string;
}

const AddList: React.FC = () => {
  const day = String(new Date().getDate()).padStart(2, "0");
  const month = String(new Date().getMonth() + 1).padStart(2, "0");
  const year = new Date().getFullYear();
  const today = `${year}-${month}-${day}`;

  const location = useLocation();
  const { currentPage } = location.state || {}; // Access the state

  // React-hook-form
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<FormFields>();

  // Fetch items list
  const { data } = useQuery<TaskResponse>({
    queryKey: ["list", currentPage],
    queryFn: () => fetchList(currentPage),
    refetchOnWindowFocus: false,
  });

  // Data's last page
  const lastPage = data?.totalPages || 1;

  // UseMutation hook for adding a new list item
  const { mutate, isSuccess } = useAddList(lastPage, data);

  const onSubmit: SubmitHandler<FormFields> = (formData) => {
    const newTask: Task = {
      id: "0", // This can be a placeholder, as it will be generated by the <server className=""></server>
      order: (data?.dataLength || 0) + 1,
      title: formData.title,
      description: formData.description,
      date_input: today,
      deadline: formData.date,
      checked: false, // Set the default value for 'checked'
    };

    // Trigger the mutation to add a new list
    mutate(newTask);
  };

  return (
    <Card fluid={true}>
      <form
        className="flex flex-col bg-white shadow-xl rounded-lg w-full px-8 py-2"
        onSubmit={handleSubmit(onSubmit)}
      >
        {/* Title Input */}
        <div className="flex flex-col mt-1 mb-2">
          <div className="flex flex-col md:flex-row justify-between md:items-center">
            <label className="font-semibold" htmlFor="title">
              Title
            </label>
            {errors.title && (
              <p className="text-red-500 text-sm font-semibold italic mb-2">
                {errors.title.message}
              </p>
            )}
          </div>
          <input
            {...register("title", { required: "Title is required" })}
            type="text"
            id="title"
            className={`border focus:outline-none rounded-lg px-3 py-2 ${
              errors.title
                ? "border-red-important-validation "
                : "border-gray-300"
            }`}
          />
        </div>

        {/* Description Input */}
        <div className="flex flex-col mt-1 mb-2">
          <div className="flex flex-col md:flex-row justify-between md:items-center">
            <label className="font-semibold" htmlFor="description">
              Description
            </label>
            {errors.description && (
              <p className="text-red-500 text-sm font-semibold italic mb-2">
                {errors.description.message}
              </p>
            )}
          </div>
          <input
            {...register("description", {
              required: "Description is required",
            })}
            type="text"
            id="description"
            className={`border focus:outline-none rounded-lg px-3 py-2 ${
              errors.description
                ? "border-red-important-validation "
                : "border-gray-300"
            }`}
          />
        </div>

        {/* Date Input */}
        <div className="flex flex-col mt-1 mb-2">
          <div className="flex flex-col md:flex-row justify-between md:items-center">
            <label className="font-semibold" htmlFor="date">
              Deadline
            </label>
            {errors.date && (
              <p className="text-red-500 text-sm font-semibold italic mb-2">
                {errors.date.message}
              </p>
            )}
          </div>
          <input
            {...register("date", {
              required: "A deadline must be selected",
              validate: (value) =>
                new Date(value) >= new Date(today) ||
                "Deadline cannot be in the past",
            })}
            type="date"
            id="date"
            min={today}
            className={`border focus:outline-none rounded-lg px-3 py-2 ${
              errors.date
                ? "border-red-important-validation "
                : "border-gray-300"
            }`}
          />
        </div>

        {/* Submit Button */}
        <div className="flex justify-center">
          {isSuccess ? (
            <span className="mt-3 py-2 flex items-center justify-center border w-32 h-fit rounded-lg bg-orange-400/30 cursor-progress">
              <div className="spinner-border text-primary" role="status">
                <span className="visually-hidden">Loading...</span>
              </div>
            </span>
          ) : (
            <button
              type="submit"
              className="mt-3 px-2 py-3 border w-fit rounded-lg text-white font-bold bg-orange-400 transition-all duration-150 delay-75 hover:bg-orange-600"
            >
              Add Task
            </button>
          )}
        </div>
      </form>

      {/* Back Link */}
      <div className="hover:text-gray-500">
        <Link to={`/page/${currentPage}`} style={{ textDecoration: "none" }}>
          <div className="mt-2 flex justify-center items-center gap-2">
            <FaLongArrowAltLeft /> Back to homepage
          </div>
        </Link>
      </div>
    </Card>
  );
};

export default AddList;
